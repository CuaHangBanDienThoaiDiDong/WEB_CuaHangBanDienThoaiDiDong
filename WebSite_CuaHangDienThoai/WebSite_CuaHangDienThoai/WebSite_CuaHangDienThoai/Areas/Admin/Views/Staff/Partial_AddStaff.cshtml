@model WebSite_CuaHangDienThoai.Models.Token.Admin.Admin_Add_Staff_ToKen


@using (Ajax.BeginForm("Add", "Staff", new AjaxOptions
{
    HttpMethod = "POST",
    UpdateTargetId = "load_data",
    OnSuccess = "OnSuccessCO",
    OnFailure = "OnFailure",
    OnBegin = "OnBeginCO"
}, new { @Id = "myForm" }))
{


    <script>
        function validateEmail(email) {
            var emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            return emailPattern.test(email);
        }




        function validateForm() {
            var name = document.getElementById('Name').value.trim();
            var sdt = document.getElementById('SDT').value.trim();
            var CCCD = document.getElementById('CCCD').value.trim();
            var email = document.getElementById('Email').value.trim();
            var luong = document.getElementById('demoPrice').value.trim();
            var diaChi = document.getElementById('DiaChi').value.trim();
            var birthdayInput = document.getElementById('birthdayInput').value;


            if (!name || !sdt || !email || !CCCD || !diaChi || !luong) {

                Swal.fire({
                    icon: "error",
                    title: "Lỗi tìm...",
                    text: "Vui lòng điền đầy đủ thông tin.",
                    /*footer: '<a href="#">Why do I have this issue?</a>'*/
                });
                return false;

            }
            var luong = $('#demoPrice').autoNumeric('get');
            if (parseFloat(luong) >= 5000000.00) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi...",
                    text: "Lương phải nhỏ hơn 5,000,000.00.",
                });
                return false;
            }
            if (sdt.length != 10) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi...",
                    text: "Số điện thoại không được dài hơn 10 ký tự.",
                });
                return false;
            }
            if (CCCD.length != 12) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi...",
                    text: "Căn cước không được dài hơn 12 ký tự.",
                });
                return false;
            }
            if (!validateEmail(email)) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi...",
                    text: "Vui lòng nhập địa chỉ email hợp lệ.",
                });
                return false;
            }
            var birthdayInput = document.getElementById('birthdayInput').value;

            // Gán giá trị vào trường ẩn
            document.getElementById('Birthday').value = birthdayInput;



            // Tạo đối tượng Date từ giá trị nhập vào
            var birthday = new Date(birthdayInput);


            var today = new Date();


            var birthYear = birthday.getFullYear();


            var currentYear = today.getFullYear();


            if (!birthdayInput) {
                alert("Vui lòng chọn ngày sinh.");
                return false;
            }


            if (currentYear - birthYear < 18) {
                Swal.fire({
                    icon: "error",
                    title: "Không đủ yêu cầu...",
                    text: "Phải ít nhất 18 tuổi để đăng ký.",
                });

                return false;
            }


            return true;
        }


        function OnBeginCO() {
            $('#btnRegister').attr("disabled", "disabled");
        }

        function submitForm() {
            // Validate form
            if (!validateForm()) {
                return;
            }

            // Lấy ra form và tạo đối tượng FormData
            var form = document.getElementById('myForm');
            var formData = new FormData(form);
            var newImage = document.getElementById('newImage').files[0];
            if (newImage) {
                formData.append('newImage', newImage); 
            }
            // Gửi formData lên server
            $.ajax({
                url: '/Staff/Add',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    // Xử lý phản hồi từ server
                    OnSuccessCO(response);
                },
                error: function (error) {
                    // Xử lý lỗi
                    OnFailure(error);
                }
            });
        }

        function OnSuccessCO(res) {
            if (res.Success) {
                if (res.Code == 1) {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: "top-end",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.onmouseenter = Swal.stopTimer;
                            toast.onmouseleave = Swal.resumeTimer;
                        }
                    });

                    Toast.fire({
                        icon: "success",
                        title: "Thêm nhân viên thành công"
                    });

                    setTimeout(function () {
                        location.href = "/admin/Staff/index";
                    }, 2000); // Thời gian chờ là 2000ms tương ứng với 2 giây
                }
                else {
                }
            }
            else {
                if (res.Code == -2) {
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi thêm nhân viên...",
                        text: "Email đã tồn tại",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });

                }
                if (res.Code == -3) {
                    Swal.fire({
                        icon: "warning",
                        title: "Lỗi thêm nhân viên...",
                        text: "Số điện thoại đã tồn tại ",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });
                }
                if (res.Code == -4) {
                    Swal.fire({
                        icon: "question",
                        title: "Lỗi thêm nhân viên...",
                        text: "Không thấy chức năng cho nhân viên mới ",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });

                }
                if (res.Code == -5) {
                    Swal.fire({
                        icon: "info",
                        title: "Không để trống...",
                        text: "Vui lòng nhập đầy đủ thông tin nhân viên ",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });
                }
                if (res.Code == -6) {
                    Swal.fire({
                        icon: "info",
                        title: "Không để trống...",
                        text: "Vui lòng chọn ảnh nhân viên",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });
                } if (res.Code == -7) {
                    Swal.fire({
                        icon: "info",
                        title: "Không để trống...",
                        text: "Dữ liễu rỗng",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });
                }
                if (res.Code == -100) {
                    Swal.fire({
                        icon: "warning",
                        title: "Lỗi tìm...",
                        text: "Lỗi hệ thống máy chủ",
                        /*footer: '<a href="#">Why do I have this issue?</a>'*/
                    });
                }
            }

        }

        function submitForm() {
            // Validate form
            if (!validateForm()) {
                return;
            }

            
            var form = document.getElementById('myForm');
            var formData = new FormData(form);

           
            $.ajax({
                url: '/Staff/Add',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                   
                    OnSuccessCO(response);
                },
                error: function (error) {
                  
                    OnFailure(error);
                }
            });
        }





    </script>


    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-header">
            <h3 class="card-title text-center">THÔNG TIN NHÂN VIÊN MỚI </h3>
        </div>

        <div class=" card-body">
            <div class="row">
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-body">

                            <div class="form-group text-center newImage">

                                <label class="" id="lbImagePreview" style="display: block;">Ảnh nhân viên:</label>
                              

                                <div class="text-center d-flex" style="  text-align: center;">
                                    <img id="newImagePreview" src="#" alt="New Image Preview" style="width: 100%; height: 50%; margin: auto; display: block ;border-radius:80px" />
                                </div>

                            </div>
                            <div class="form-group text-center bg-gray">
                                <input type="file" name="newImage" id="newImage" accept="image/jpeg, image/png, image/gif" onchange="previewImage(event)" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-9 ">
                 
                        <form>
                            <div class="row">
                                <div class="col-md-12">

                                    <div class="form-group app-label">
                                        <label for="frist-name" class="text-muted">Họ Tên</label>

                                        @*@Html.EditorFor(model => model.Name, id = "Code", new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập tên nhân viên" } })*@
                                        <input type="text" name="Name" id="Name" required class="form-control" autocomplete="off" placeholder="Nhập tên nhân viên " />
                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="middle-name" class="text-muted">Số điện thoại</label>
                                        <div class="form-group">

                                            <input type="number" name="SDT" id="SDT" required class="form-control" autocomplete="off" placeholder="Số điện thoại" />
                                            @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="surname-name" class="text-muted">Căn cước công dân</label>
                                        <div class="form-group">

                                            <input type="number" name="CCCD" id="CCCD" required class="form-control" autocomplete="off" placeholder="Căn cước công dân" />
                                            @Html.ValidationMessageFor(model => model.CCCD, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="date-of-birth" class="text-muted">Ngày sinh</label>
                                        <input type="datetime-local" id="birthdayInput" />
                                        @Html.HiddenFor(model => model.Birthday)
                                        @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
                                    </div>
                                </div>





                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="General" class="text-muted">Chức vụ</label>
                                        @*@Html.Action("Partival_IdChucNang", "Staff")*@

                                        @*@Html.ValidationMessageFor(x => x.ProductCategoryId, null, new { @class = "text-danger" })*@
                                        @Html.DropDownListFor(x => x.FunctionId, ViewBag.ChucNang as SelectList, "-Chọn danh mục chức năng-", new { @class = "form-control", @placeholder = "Chức Năng Nhân Viên" })
                                        @Html.ValidationMessageFor(x => x.FunctionId, null, new { @class = "text-danger" })



                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="General" class="text-muted">Cửa hàng</label>
                                        @*@Html.Action("Partival_IdChucNang", "Staff")*@

                                        @*@Html.ValidationMessageFor(x => x.ProductCategoryId, null, new { @class = "text-danger" })*@
                                        @Html.DropDownListFor(x => x.StoreId, ViewBag.Store as SelectList, "-Chọn cửa hàng-", new { @class = "form-control", @placeholder = "Cửa hàng làm việc" })
                                        @Html.ValidationMessageFor(x => x.StoreId, null, new { @class = "text-danger" })



                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <label for="surname-name" class="text-muted">Email</label>
                                        <div class="form-group">

                                            <input type="text" name="Email" id="Email" required class="form-control" autocomplete="off" placeholder="Email" />
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

                                        </div>

                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group app-label">
                                        <div class="col-lg-12">
                                            <div class="form-group app-label">
                                                <label for="General" class="text-muted">Lương</label>

                                                <input type="text" name="demoPrice" value="0" id="demoPrice" class="form-control auto" data-a-dec="," data-a-sep=".">

                                                @Html.HiddenFor(model => model.Luong, new { @class = "form-control", @placeholder = "Lương" })
                                                @Html.ValidationMessageFor(model => model.Luong, "", new { @class = "text-danger" })

                                            </div>
                                        </div>
                                    </div>
                                </div>



                                <div class="col-md-10">
                                    <div class="form-group app-label">
                                        <div class="col-lg-12">
                                            <div class="form-group app-label">

                                                <label for="General" class="text-muted">Địa Chỉ</label>
                                                <input type="text" name="DiaChi" id="DiaChi" required class="form-control" autocomplete="off" placeholder="Địa Chỉ" />
                                                @*@Html.EditorFor(model => model.DiaChi, new { htmlAttributes = new { @class = "form-control" } })*@
                                                @Html.ValidationMessageFor(model => model.DiaChi, "", new { @class = "text-danger" })


                                                @*<textarea id="address" rows="4" class="form-control resume" placeholder=""></textarea>*@
                                            </div>
                                        </div>
                                    </div>
                                </div>



                                <div class="col-md-2">
                                    <div class="form-group app-label">
                                        <div class="col-lg-12">
                                            <div class="form-group app-label">

                                                <label>Giới tính</label>
                                                <select class="form-control" id="drTypePayment" name="GioiTinh">
                                                   
                                                    <option value="Nam" id="chuyenkhoan">Nam</option>
                                                    <option value="Nữ" id="chuyenkhoan">Nữ</option>

                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                        <div class="row">
                            <div class="col-1"></div>

                            <div class="col-10 d-grid gap-2 col-10 mx-auto">
                                <button type="button" class="btn btn-success btnRegister" onclick="submitForm();">Đăng ký nhân viên mới</button>

                            </div>

                            <div class="col-1"></div>
                        </div>
                    
                </div>
            </div>
        </div>
    </div>




}

<script>
    function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function () {
            var output = document.getElementById('newImagePreview');
      
            var lbImagePreview = document.getElementById('lbImagePreview');

            output.src = reader.result;
            output.style.display = 'none';
            if ( lbImagePreview) {
                output.style.display = 'block';
             
                lbImagePreview.style.display = 'block';
           
            } else {
            
                lbImagePreview.style.display = 'none';
               
            }
        };
        reader.readAsDataURL(event.target.files[0]);
    }
</script>