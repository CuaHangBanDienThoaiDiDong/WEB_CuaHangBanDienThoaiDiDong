@model WebSite_CuaHangDienThoai.Models.Admin_TokenEditBill

@{
    ViewBag.Title = "Sửa hóa đơn " + Model.Code;
}
<style>
    .scrollable-content {
        max-height: 350px;
        overflow-y: auto;
    }

    .scrollable-product-list {
        max-height: 400px; /* Điều chỉnh chiều cao tối đa của phần danh sách sản phẩm */
        overflow-y: auto; /* Cho phép cuộn dọc khi nội dung vượt quá chiều cao */
    }
</style>

@section naviheader {
    <!-- Left navbar links -->
    <ul class="navbar-nav">
        <li class="nav-item">
            <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
        </li>
        <li class="nav-item d-none d-sm-inline-block">
            <a href="/admin/seller/index" class="nav-link">Bán hàng</a>
        </li>
        <li class="nav-item d-none d-sm-inline-block">
            <a href="/admin/productcategory" class="nav-link">@ViewBag.Title</a>
        </li>
    </ul>
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css">

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <b>Chi tiết đơn hàng @Model.Code - @Model.CreatedDate.ToString("dd/MM/yyyy")</b>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/admin/seller/index">Bán hàng</a></li>
                    <li class="breadcrumb-item active">@ViewBag.Title</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div id="alter" style="position: fixed; top: 20px; right: 30px; z-index: 9999; display: none;">
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="mr-auto">Thông báo</strong>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="toast-body">
                <div id="alertMessage">Thuânjas</div>
            </div>
        </div>
    </div>
    <div class="noidung">
        <div class="card">
            <div class="card-header">
                <label>Hóa đơn @Model.Code</label>
            </div>
            <div class="card-body ">
                <form id="editBill" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.SellerId)
                    @Html.HiddenFor(model => model.Code)
                    @Html.HiddenFor(model => model.CreatedBy)
                    @Html.HiddenFor(model => model.CreatedDate)
                    @Html.HiddenFor(model => model.StaffId)

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Mã đơn hàng</label>
                                <p class="form-control">@Model.Code</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Họ tên khách</label>
                                <p class="form-control">@Model.Customer.CustomerName</p>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group" id="loadTotal">
                                <label>Tổng tiền</label>
                                @*<input type="text" name="demoPriceSale" id="demoPriceSale" value="@Model.TotalAmount" class="form-control border border-1, col-12 auto">*@
                                <p class="form-control">@WebSite_CuaHangDienThoai.Common.Common.FormatNumber(Model.TotalAmount, 0) đ</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Số điện thoại</label>
                                @Html.TextBoxFor(model => model.Phone, new { @class = "form-control border border-1, col-12", id = "Phone", type = "text", pattern = "[0-9]" })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Ngày tạo</label>
                                <p class="form-control">@Model.CreatedDate.ToString("dd/MM/yyyy")</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @*<label>Trạng thái thanh toán</label>
                                    <p class="form-control">@(Model.TypePayment == 1 ? "Thanh toán tại quầy" : "Đã thanh toán")</p>*@

                                <div class="form-inline col-md-12 mt-2">
                                    <label class="control-label mr-2">Trạng thái thanh toán:</label>
                                    <select class="form-control col-md-12" id="drTypePayment" name="TypePayment">

                                        <option value="0" id="nam">Thanh toán tại quầy</option>
                                        <option value="1" id="nu">Đã thanh toán</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <h4>Danh sách sản phẩm</h4>
                    <div id="loadListItem">

                    </div>
                </form>

            </div>

            <div class="card-footer">
                <div class="row">
                    <div class="col-1"></div>
                    <div class="col-10 d-grid gap-2 col-10 mx-auto">
                        <button type="button" class="btn btn-success" id="saveButton">Lưu hóa đơn @Model.Code</button>
                    </div>

                    <div class="col-1"></div>
                </div>
            </div>
        </div>


    </div>
</section>
<script>
  $(document).ready(function () {
    var sellerId = @Model.SellerId;

    loadListItem(sellerId);
    updateTotalPrice(sellerId);

    function updateTotalPrice(sellerId) {
        $.ajax({
            url: '@Url.Action("GetTotalPrice", "Bill")',
            type: 'GET',
            data: { sellerId: sellerId },
            success: function (response) {
                $('#loadTotal').html('   <label>Tổng tiền</label><br/><p class="form-control">' + response + '</p>');
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
                showNotification('error', 'Lỗi', 'Đã xảy ra lỗi khi cập nhật tổng tiền.');
            }
        });
    }

    function loadListItem(sellerId) {
        if (sellerId != null) {
            $.ajax({
                url: '@Url.Action("Partail_ListProductEdit", "Bill")',
                type: 'GET',
                data: { sellerId: sellerId },
                success: function (response) {
                    $("#loadListItem").html(response);
                    attachDeleteItemEvent(); // Bắt sự kiện xóa mục
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                    showNotification('error', 'Lỗi', 'Đã xảy ra lỗi khi tải lại danh sách sản phẩm.');
                }
            });
        }
    }

    function submitForm() {
        var isValid = true;
        var errorMessage = "";

        var phoneNumber = $('#Phone').val();

        if (!phoneNumber) {
            isValid = false;
            errorMessage += "Số điện thoại không được để trống.\n";
        } else if (phoneNumber.length !== 10) {
            isValid = false;
            errorMessage += "Số điện thoại không hợp lệ.\n";
        }

        if (!isValid) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: errorMessage
            });
            return;
        }

        var form = $('#editBill')[0];
        var formData = new FormData(form);

        $.ajax({
            url: '@Url.Action("Edit", "Bill")',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.Code === 1) {
                    if (confirm("Hóa đơn đã có trong hệ thống ")) {
                           window.location.href = '@Url.Action("DownBill", "Bill")?filePath=' + encodeURIComponent(response.FilePath);
                    }

                }
            },
            error: function(xhr, status, error) {
                console.error("Lỗi AJAX:", xhr.responseText);
                showNotification('error', 'Lỗi', 'Không thể kết nối tới máy chủ. Vui lòng thử lại sau.');
            }
        });
    }

      function downloadFile(fileName, fileBytes) {
          var blob = new Blob([fileBytes], { type: "application/octet-stream" });
          var url = window.URL.createObjectURL(blob);
          var a = document.createElement('a');
          a.href = url;
          a.download = fileName;
          document.body.appendChild(a);
          a.click();
          setTimeout(function () {
              document.body.removeChild(a);
              window.URL.revokeObjectURL(url);
          }, 0);
      }

    function handleErrorCode(code) {
        switch (code) {
            case -3:
                showNotification('error', 'Lỗi', 'Dữ liệu không hợp lệ. Không tìm thấy hóa đơn.');
                break;
            case -4:
                showNotification('error', 'Lỗi', 'Dữ liệu không hợp lệ. Hóa đơn phải có ít nhất 1 sản phẩm.');
                break;
            case -2:
                showNotification('error', 'Lỗi', 'Dữ liệu không hợp lệ. Không tìm thấy hóa đơn.');
                break;
            case -6:
                showNotification('error', 'Lỗi', 'Dữ liệu không hợp lệ. Số điện thoại không tồn tại.');
                break;
            default:
                showNotification('error', 'Lỗi', 'Đã xảy ra lỗi. Vui lòng thử lại.');
                break;
        }
    }

    function showNotification(type, title, message) {
        var alertDiv = $('#alert .toast');

        alertDiv.removeClass('alert-success alert-danger');

        if (type === 'success') {
            alertDiv.addClass('alert-success');
        } else if (type === 'error') {
            alertDiv.addClass('alert-danger');
        }

        $('#alertMessage').html('<strong>' + title + '</strong>: ' + message);

        $('#alert').toast('show');

        setTimeout(function () {
            $('#alert').toast('hide');
        }, 1500);
    }
      //update so luong

      $(document).on('input', '.Update_Quantity_For_Edit_Bill', function () {
          var input = $(this);
          var newQuantity = input.val().trim(); // Lấy giá trị và loại bỏ khoảng trắng ở hai đầu

          // Kiểm tra và lưu trữ giá trị ban đầu nếu chưa có
          if (!input.data('original-value')) {
              input.data('original-value', input.val()); // Lưu giá trị ban đầu
          }

          // Xử lý khi số lượng là rỗng hoặc bằng 0
          if (newQuantity === "" || parseInt(newQuantity) === 0) {
              // Hiển thị cảnh báo và yêu cầu xác nhận
              if (confirm("Số lượng không thể nhỏ hơn 0. Bạn có muốn khôi phục lại số lượng cũ không?")) {
                  // Khôi phục lại số lượng cũ
                  input.val(input.data('original-value'));
              } else {
                  // Không đồng ý, giữ nguyên giá trị nhập vào và không cập nhật
                  return;
              }
          } else {
              // Nếu số lượng hợp lệ, tiến hành cập nhật
              updateQuantity(input);
          }
      });

      // Hàm cập nhật số lượng
      function updateQuantity(input) {
          var productDetailId = input.attr('id');
          var importWarehouseDetailId = input.data('importwarehousedetailid');
          var importWarehouseId = input.data('importwarehousedid');
          var newQuantity = input.val().trim();

          // Lưu giá trị ban đầu của số lượng
          if (!input.data('original-quantity')) {
              input.data('original-quantity', newQuantity);
          }

        
          $.ajax({
              url: '/Admin/Bill/UpdateQuantityForEditNew', // Đổi đường dẫn tới action của bạn
              type: 'POST',
              data: {
                  productId: productDetailId,
                  sellerId: importWarehouseId,
                  sellerDetailId: importWarehouseDetailId,
                  newQuantity: newQuantity
              },
              success: function (response) {
                  if (response.success) {
                      alert("Cập nhật số lượng thành công");

                      
                      updateTotalPrice(importWarehouseId);
                  } else {
                      alert("Lỗi: " + response.errorMessage);
                      // Khôi phục lại giá trị ban đầu của số lượng
                      input.val(input.data('original-quantity'));
                  }
              },
              error: function (xhr, status, error) {
                  alert("Lỗi: Không thể kết nối tới máy chủ. Vui lòng thử lại sau.");
                  // Xử lý lỗi và khôi phục lại giá trị ban đầu của số lượng
                  input.val(input.data('original-quantity'));
              }
          });
      }




    // Bắt sự kiện khi click vào nút Lưu hóa đơn
    $('#saveButton').click(function () {
        submitForm(); // Gọi hàm xử lý submit form của bạn
    });
});
</script>
